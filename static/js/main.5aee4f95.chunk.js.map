{"version":3,"sources":["types/index.js","components/App.js","actions/index.js","redusers/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDER","App","state","text","date","Date","render_Reminder","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_Reminder","id","value","this","onChange","e","setState","target","type","placeholder","selected","showTimeSelect","timeFormat","timeCaption","dateFormat","add_Reminder","clear_Reminder","Component","connect","action","read_cookie","Math","random","bake_cookie","filter","store","createStore","reactDom","render","document","getElementById"],"mappings":"wMAAaA,EAAe,eAEfC,EAAkB,kBAElBC,EAAiB,iB,iDCGxBC,E,4MACFC,MAAQ,CACJC,KAAO,GACPC,KAAO,IAAIC,M,EAGfC,gBAAkB,WACd,IAAOC,EAAa,EAAKC,MAAlBD,UACP,OACI,oBAAIE,UAAU,aAAd,SAEQF,EAAUG,KAAK,SAAAC,GACX,OACI,qBAAIF,UAAU,kBAAd,UACI,8BAAME,EAASR,OACf,8BAAMS,IAAO,IAAIP,KAAKM,EAASP,OAAOS,YACtC,qBAAKC,QAAU,kBAAM,EAAKN,MAAMO,gBAAgBJ,EAASK,KAAKP,UAAU,kBAAxE,iBAHiCE,EAASK,U,4CAYtE,WAAS,IAAD,OACJ,OACI,qBAAKP,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oDACA,yCACA,uBAAOQ,MAAOC,KAAKhB,MAAMC,KAAMgB,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAElB,KAAOiB,EAAEE,OAAOL,SAASM,KAAK,OAAOd,UAAU,eAAee,YAAY,eAC3I,yCACA,cAAC,IAAD,CACIC,SAAUP,KAAKhB,MAAME,KACrBe,SAAU,SAACf,GAAU,EAAKiB,SAAS,CAAEjB,KAAOA,KAC5CsB,gBAAc,EACdC,WAAW,QACXC,YAAY,OACZnB,UAAU,eACVoB,WAAW,uBACXZ,MAAOC,KAAKhB,MAAME,KAClBoB,YAAY,eAEhB,wBAAQV,QAAU,WACd,EAAKN,MAAMsB,aAAa,EAAK5B,MAAMC,KAAO,EAAKD,MAAME,MACrD,EAAKiB,SAAS,CAAElB,KAAO,GAAKC,KAAO,MAChCK,UAAU,wBAHjB,0BAICS,KAAKZ,kBACN,wBAAQQ,QAAU,kBAAM,EAAKN,MAAMuB,kBAAkBtB,UAAU,uBAA/D,qC,GAjDFuB,aA6DHC,mBANf,SAAyB/B,GACrB,MAAM,CACFK,UAAYL,KAIqB,CAAC4B,aClEd,SAAC3B,EAAOC,GAQhC,MANe,CACXmB,KAAOzB,EACPK,OACAC,SD6DiDW,gBCxD1B,SAACC,GAO5B,MALe,CACXO,KAAOxB,EACPiB,ODoDmEe,eC/C7C,WAM1B,MAJe,CACXR,KAAOvB,KD4CAiC,CAA6EhC,G,iCEpC7EM,EA9BG,WAA0B,IAAzBL,EAAwB,uDAAhB,GAAKgC,EAAW,uCAEnC3B,EAAY,KAGhB,OAFAL,EAAQiC,sBAAY,aAEjBD,EAAOX,OAASzB,GAEfS,EAAS,sBAAOL,GAAP,CAAe,CAACC,KAAO+B,EAAO/B,KAAOC,KAAO8B,EAAO9B,KAAOY,GAAKoB,KAAKC,YAE7EC,sBAAY,YAAc/B,GACnBA,GAEF2B,EAAOX,OAASxB,GAErBQ,EAAYL,EAAMqC,QAAO,SAAA5B,GAAQ,OAAIA,EAASK,KAAOkB,EAAOlB,MAE5DsB,sBAAY,YAAc/B,GACnBA,GAEF2B,EAAOX,OAASvB,GAErBO,EAAY,GAEZ+B,sBAAY,YAAc/B,GACnBA,GAEAL,GCpBTsC,G,OAAQC,YAAYlC,IAE1BmC,IAASC,OAEL,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SAAwB,cAAC,EAAD,MAExBI,SAASC,eAAe,W","file":"static/js/main.5aee4f95.chunk.js","sourcesContent":["export const ADD_REMINDER = 'ADD_REMINDER'\r\n\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER'\r\n\r\nexport const CLEAR_REMINDER = 'CLEAR_REMINDER'","import React , {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {add_Reminder , remove_Reminder , clear_Reminder} from './../actions/index'\r\nimport moment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass App extends Component{\r\n    state = {\r\n        text : '' , \r\n        date : new Date()\r\n    }\r\n\r\n    render_Reminder = () => {\r\n        const {reminders} = this.props ; \r\n        return(\r\n            <ul className=\"list-group\">\r\n                {\r\n                    reminders.map( reminder => {\r\n                        return(\r\n                            <li className=\"list-group-item\" key={reminder.id}>\r\n                                <div>{reminder.text}</div>\r\n                                <div>{moment(new Date(reminder.date)).fromNow()}</div>\r\n                                <div onClick={ () => this.props.remove_Reminder(reminder.id)} className='btn btn-primary'>X</div>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"app\">\r\n                <div className=\"container\">\r\n                    <h2>What Should U DO ?</h2>\r\n                    <label>Text</label>\r\n                    <input value={this.state.text} onChange={ (e) => this.setState({ text : e.target.value})} type='text' className=\"form-control\" placeholder=\"Enter Text\" />\r\n                    <label>Date</label>\r\n                    <DatePicker\r\n                        selected={this.state.date}\r\n                        onChange={(date) => {this.setState({ date : date})}}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        timeCaption=\"time\"\r\n                        className=\"form-control\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        value={this.state.date}\r\n                        placeholder=\"Enter Date\"\r\n                    />\r\n                    <button onClick={ () => {\r\n                        this.props.add_Reminder(this.state.text , this.state.date) \r\n                        this.setState({ text : '' , date : ''})\r\n                        }} className=\"btn btn-primary w-100\">Add Reminder</button>\r\n                    {this.render_Reminder()}\r\n                    <button onClick={ () => this.props.clear_Reminder()} className=\"btn btn-danger w-100\">Clear Reminder</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state){\r\n    return{\r\n        reminders : state\r\n    }\r\n    \r\n}\r\nexport default connect(mapStateToProps , {add_Reminder , remove_Reminder , clear_Reminder})(App);","import { ADD_REMINDER, REMOVE_REMINDER , CLEAR_REMINDER} from \"../types\"\r\n\r\nexport const add_Reminder = (text , date) => {\r\n\r\n    const action = {\r\n        type : ADD_REMINDER , \r\n        text , \r\n        date\r\n    }\r\n\r\n    return action \r\n}\r\nexport const remove_Reminder = (id) => {\r\n\r\n    const action = {\r\n        type : REMOVE_REMINDER ,  \r\n        id\r\n    }\r\n\r\n    return action \r\n}\r\nexport const clear_Reminder = () => {\r\n\r\n    const action = {\r\n        type : CLEAR_REMINDER         \r\n    }\r\n    \r\n    return action \r\n}","import { ADD_REMINDER, REMOVE_REMINDER , CLEAR_REMINDER} from \"../types\";\r\nimport { bake_cookie, read_cookie} from 'sfcookies'\r\nconst reminders = (state = [] , action) => {\r\n\r\n    let reminders = null ; \r\n    state = read_cookie('reminders')\r\n\r\n    if(action.type === ADD_REMINDER){\r\n\r\n        reminders = [...state , {text : action.text , date : action.date , id : Math.random()}]\r\n\r\n        bake_cookie('reminders' , reminders)\r\n        return reminders \r\n\r\n    }else if(action.type === REMOVE_REMINDER){\r\n\r\n        reminders = state.filter(reminder => reminder.id !== action.id)\r\n\r\n        bake_cookie('reminders' , reminders)\r\n        return reminders\r\n\r\n    }else if(action.type === CLEAR_REMINDER){\r\n\r\n        reminders = []\r\n\r\n        bake_cookie('reminders' , reminders)\r\n        return reminders\r\n    }else{\r\n        return state\r\n    }\r\n    \r\n}\r\nexport default reminders;","import React from 'react'\r\nimport reactDom from 'react-dom'\r\nimport App from './components/App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport reminders from './redusers';\r\nimport './style.css'\r\nconst store = createStore(reminders)\r\n\r\nreactDom.render(\r\n\r\n    <Provider store={store}><App /></Provider> , \r\n\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}